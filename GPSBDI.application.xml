<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Determinação de percursos usando agentes BDI</H3>
	O objectivo do condutor é chegar ao seu destino, passando, ou não,
	pelos locais de lazer disponíveis. Existem os seguinte cenários:
	<ul>
	<li>Visita turística - passa pelos vários pontos de interessa</li>
        <li>Visita turística com dois condutores - passa pelos vários pontos de interessa e há dois condutores no espaço</li>
	<li>Directo - desloca-se directamente para o destino final</li>
	</ul>
	
-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:env="http://jadex.sourceforge.net/jadex-envspace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-application-2.2.xsd
	                    http://jadex.sourceforge.net/jadex-envspace 
	                    http://jadex.sourceforge.net/jadex-envspace-2.2.xsd"
	name="GPSBDI">
	
    <!-- <imports>
        <import>jadex.extension.envsupport.environment.space2d.*</import>
        <import>jadex.extension.envsupport.environment.DeltaTimeExecutor</import>
        <import>jadex.extension.envsupport.math.*</import>
        <import>jadex.extension.envsupport.dataview.*</import>
        <import>java.text.SimpleDateFormat</import>
        <import>java.util.Date</import>
        <import>jadex.extension.envsupport.observer.perspective.*</import>
        <import>jadex.extension.envsupport.evaluation.*</import>
        <import>jadex.extension.envsupport.observer.gui.plugin.*</import>
        <import>jadex.bridge.service.clock.IClockService</import>
        <import>jadex.commons.future.*</import>
        <import>jadex.bridge.service.*</import>
        <import>java.util.ArrayList</import>
        <import>java.util.List</import>
        <import>jadex.commons.SimplePropertyObject</import>
        <import>jadex.extension.envsupport.environment.*</import>
        <import>jadex.extension.envsupport.observer.perspective.*</import>
        <import>jadex.extension.envsupport.evaluation.*</import>
        <import>jadex.commons.SFunction</import>
    </imports>
    -->
    <imports>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.environment.RoundBasedExecutor</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.bridge.service.clock.IClockService</import>
		<import>jadex.extension.envsupport.dataview.*</import>
		<import>jadex.extension.envsupport.observer.perspective.*</import>
		<import>jadex.bdi.planlib.*</import>
	</imports>
    
    
	<!-- 
    <extensiontypes>
        <agr:agrspacetype name="mundo">
            <agr:grouptype name="agents">
                <agr:roles>
                    <agr:role name="Driver"/>
                </agr:roles>
            </agr:grouptype>
        </agr:agrspacetype>
-->

        <!-- Space types of this application. Spaces are shared by agents of the same application. -->
	<extensiontypes>
	
		<!-- Declaration of a grid environment as space type. -->
		<env:envspacetype name="gc2dspace" width="30" height="30" class="Grid2D">
			
                    
			<!-- The objecttypes of this environment. -->
			<env:objecttypes>
				<env:objecttype name="driver">
					<env:property name="rotation" dynamic="true">
						$object.lastmove==null || $object.lastmove.equals("right")? null:
						$object.lastmove.equals("left")? new Vector3Double(Math.PI,0,Math.PI):
						$object.lastmove.equals("up")? new Vector3Double(0,0,Math.PI*3/2):
						new Vector3Double(0,0,Math.PI/2)
					</env:property>
					<env:property name="vision_range">1</env:property>
					<env:property name="position" event="true"/>
				</env:objecttype>
				
				<env:objecttype name="accident">
					<env:property name="position" event="true"/>
				</env:objecttype>
				<env:objecttype name="homebase">
                </env:objecttype>
      
                <env:objecttype name="finaldestination">
                </env:objecttype>
                
                <env:objecttype name="cell">
                    <env:property name="road"></env:property>
                </env:objecttype>
				
			</env:objecttypes>
		
     <!-- 
         <env:tasktypes>
                <env:tasktype name="move" class="MoveTask" />
            </env:tasktypes>

            <env:processtypes>
                <env:processtype name="build_map" class="BuildMap" />
            </env:processtypes>
   -->  
     
     <!-- Processes run on their own in the environment. -->
			<env:processtypes>
				<env:processtype name="create" class="DefaultObjectCreationProcess">
					<env:property name="tickrate">5</env:property>
					<env:property name="type">"accident"</env:property>
					<env:property name="properties" dynamic="true">
						jadex.commons.SUtil.createHashMap(
							new String[]{Space2D.PROPERTY_POSITION},
							new Object[]{((Space2D)$space).getRandomPosition(Vector2Int.ZERO)})
					</env:property>
				</env:processtype>
			</env:processtypes>
			
			
            <env:dataviews>
                <env:dataview name="mapa" class="GeneralDataView2D" />
            </env:dataviews>
				
            
		
						
            <env:avatarmappings>
                <env:avatarmapping componenttype="Driver" objecttype="driver"/>
            </env:avatarmappings>
			
            <env:percepttypes>
				
				<!-- Percepttypes that the environment produces and agents can consume. -->
				<env:percepttype name="accident_appeared" objecttype="accident"/>
				<env:percepttype name="accident_disappeared" objecttype="accident" />
					
				<!-- Percept generators define which percepts should be created -->
				<env:perceptgenerator name="visiongen" class="DefaultVisionGenerator">
					<env:property name="maxrange">0</env:property>
					<env:property name="range_property">"vision_range"</env:property>
					<!-- percept types are declared with associated action types: 
						percepttype, actiontype1, actiontype2, ... -->
					<env:property name="percepttypes">
						new Object[]
						{
							new String[]{"accident_appeared", "appeared", "created"}, 
							new String[]{"accident_disappeared", "disappeared", "destroyed"}
						}
					</env:property>
				</env:perceptgenerator>
				
				<!-- Percept processors consume percepts and push them into the agents. -->
				<env:perceptprocessor componenttype="Driver" class="DefaultBDIVisionProcessor" >
					<env:property name="percepttypes">
						new Object[]
						{
							new String[]{"accident_appeared", "add", "accidents"}, 
							new String[]{"accident_disappeared", "remove", "accidents"}
						}
					</env:property>
				</env:perceptprocessor>
				
			</env:percepttypes>
            

            <env:actiontypes>
				<env:actiontype name="go" class="GoAction" >
					<env:property name="object_id" class="Object"/>
					<env:property name="direction" class="String"/>
				</env:actiontype>
			</env:actiontypes>
            
            
            <env:perspectives>
                <env:perspective name="icons" class="Perspective2D" opengl="true">
                    
                    <env:drawable objecttype="driver" width="1.0" height="1.0" rotation="rotation">
						<env:property name="vision_size" dynamic="true">new Vector2Double($object.vision_range*2+1)</env:property>
						<env:texturedrectangle layer="2" x="0" y="-0.1" width="0.8" height="0.8" imagepath="images/driver.png" />
						
						
					</env:drawable>
			
                    <env:drawable objecttype="accident" width="0.5" height="0.5">
						<env:texturedrectangle layer="0" imagepath="images/crash.png" />
					</env:drawable>
					
                    <env:drawable objecttype="homebase" width="1" height="1">
                        <env:rectangle layer="1" width="1" height="1" color="#00FF00" />
                    </env:drawable>
					
					<!-- Destination -->
                    <env:drawable objecttype="finaldestination" width="1" height="1">
                        <env:rectangle layer="1" width="1" height="1" color="#FF0000" />
                    </env:drawable>
                    
                    <env:drawable objecttype="cell" width="1.0" height="1.0">
                        <env:rectangle color="yellow">
                            <env:drawcondition>!$object.road</env:drawcondition>
                        </env:rectangle>
                        <env:rectangle color="white">
                            <env:drawcondition>$object.road</env:drawcondition>
                        </env:rectangle>
                    </env:drawable>
                   <env:prelayers>
                 		
						<env:tiledlayer width="3.5" height="3.5" imagepath="images/ground.jpg" />
						<env:gridlayer width="1.0" height="1.0" color="white" />
					</env:prelayers>
                    
									
                </env:perspective>
            </env:perspectives>

			<!-- executor -->
             <env:spaceexecutor class="DeltaTimeExecutor">
                <env:property name="space">$space</env:property>
                <env:property name="tick">true</env:property>
            </env:spaceexecutor>
            <!-- <env:spaceexecutor class="RoundBasedExecutor">
				<env:property name="space">$space</env:property>
			</env:spaceexecutor>-->
        </env:envspacetype>
    </extensiontypes>

    <componenttypes>
        <componenttype name="Driver" filename="Driver.agent.xml"/>
    </componenttypes>
	
    <!-- <properties>
        <property name="clock" class="IFuture">
			SServiceProvider.getService($component.getServiceProvider(), IClockService.class, RequiredServiceInfo.SCOPE_PLATFORM)
        </property>
        <property name="turistica" class ="boolean">
			true
        </property>
    </properties>
 -->
    <configurations>
	
        <configuration name="Directo">
			<extensions>
				<env:envspace name="mygc2dspace" type="gc2dspace">
				<!-- 
					<env:processes>
                        <env:process type="build_map"/>
                    </env:processes>
			   	 -->
					<env:objects>
                        <env:object type="homebase">
                            <env:property name="position">new Vector2Double(1, 1)</env:property>
                        </env:object>
						<env:object type="accident">
                            <env:property name="position">new Vector2Double(5, 5)</env:property>
                        </env:object>
                        <env:object type="finaldestination">
                            <env:property name="position">new Vector2Double(25, 25)</env:property>
                            <env:property name="space">$space</env:property>
                        </env:object>
                    </env:objects>
                    
					<env:observers>
						<env:observer name="Mundo" dataview="mapa" perspective="abstract"/>
					</env:observers>
				</env:envspace>
			</extensions>

			<components>
				<component type="Driver"/>
			</components>			
		</configuration>
       
    </configurations>

</applicationtype>
