<?xml version="1.0" encoding="UTF-8"?>
<!--
  <H3>Determinação de percursos utilizando agentes BDI</H3>

  Percorre a matriz de posições em todas as direcções, e quando encontra um acidente recalcula a rota.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	 http://jadex.sourceforge.net/jadex-0.96.xsd"
	 name="Driver">
	
    <imports>
        <import>java.util.*</import>
        <import>java.util.logging.*</import>
        <import>jadex.base.fipa.*</import>
        <import>jadex.extension.envsupport.math.*</import>
        <import>jadex.commons.future.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.bridge.IContextService</import>
    </imports>

    <beliefs>
		
        <!-- Environment. -->
		<belief name="env" class="Grid2D">
 			<fact class="IFuture">$scope.getParentAccess().getExtension("mygc2dspace")</fact>
 		</belief>
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
 			<fact>$beliefbase.env.getAvatar($scope.getComponentDescription(), $scope.getAgentModel().getFullName())</fact>
 		</belief>
        <!-- The actual position on the grid world. -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact language="jcl">
				$beliefbase.myself.position
				// $beliefbase.myself.getProperty("position")
			</fact>
 		</belief>
        
        <belief name="time" class="ISpaceObject">
            <fact> $beliefbase.myself.getProperty("time")</fact>
        </belief>
 
        <belief name="gas" class="ISpaceObject">
            <fact> $beliefbase.myself.getProperty("gas")</fact>
        </belief>
        
        <belief name="reserva" class="ISpaceObject">
            <fact> $beliefbase.myself.getProperty("reserva")</fact>
        </belief>
        
        <belief name="accident" class="ISpaceObject" exported="true" />
		<belief name="station" class="ISpaceObject" exported="true" />
    </beliefs>
	
    <goals>
        
        <achievegoal name="check" retry="false">           
            <parameter name="type" class="String">
                <value>
                    $beliefbase.myself.tipo
                </value>
            </parameter>
            <parameter name="target" class="ISpaceObject">
                 <value>
                    $target
                </value>
            </parameter>
            
             <creationcondition>
                    ISpaceObject $target &amp;&amp;
                    $beliefbase.myself.accident == $target &amp;&amp;
               		$target.state=="notavoid" &amp;&amp;
               		$target.dummy=="no"
            </creationcondition>
            <deliberation>
                <inhibits ref="go"/>
                <inhibits ref="check"/>
            </deliberation>
            
        </achievegoal>
        
        <achievegoal name="fill" >
            <parameter name="pos" class="IVector2"/>
            <parameter name="target" class="ISpaceObject">
                 <value>
                    $target
                </value>
            </parameter>        
             <creationcondition>
                    ISpaceObject $target &amp;&amp;
                    $beliefbase.myself.accident == $target &amp;&amp;
               		$target.state=="notavoid" &amp;&amp;
               		$target.dummy=="yes" 
            </creationcondition>
            <dropcondition>
                ISpaceObject $target &amp;&amp;
                $beliefbase.myself.accident == $target &amp;&amp;
                $target.state=="notavoid" &amp;&amp;
               	$target.dummy=="no" 
            </dropcondition>
            <deliberation>
                <inhibits ref="go"/>
                <inhibits ref="fill"/>
            </deliberation>
        </achievegoal>
        
		
		<!-- Goal for going to a specified position. -->
		<performgoal name="go" retry = "false">
			<parameter name="pos" class="IVector2"/>
			 <dropcondition>
                ISpaceObject $target &amp;&amp;
                $beliefbase.myself.accident == $target &amp;&amp;
                $target.state=="notavoid"     
            </dropcondition>
            <!--<dropcondition>
                $beliefbase.myself.gas == $beliefbase.myself.reserva      
            </dropcondition>-->
		</performgoal> 
		
		

    </goals>
	
    <plans>
    
    <plan name="checkAccident">
        <parameter name="type" class="String">
			    <goalmapping ref="check.type"/>
            </parameter>
            <parameter name="target" class="ISpaceObject">
                <goalmapping ref="check.target"/>
            </parameter>
			
            <body class="CheckAccident"/>
            <trigger>
                <goal ref="check"/>
            </trigger>
        </plan>
        
     <plan name="fillGas">
            <parameter name="pos" class="IVector2">
 				<goalmapping ref="fill.pos"/>
			</parameter>
			<parameter name="target" class="ISpaceObject">
                <goalmapping ref="fill.target"/>
            </parameter>
            <body class="FillGas"/>
            <trigger>
                <goal ref="fill"/>
            </trigger>
        </plan> 
    
    
		<!-- Plan for going to a target position. -->
		<plan name="go_plan">
			<parameter name="pos" class="IVector2">
 				<goalmapping ref="go.pos"/>
			</parameter>
			<body class="GoPlanEnv"/>
			<trigger>
				<goal ref="go"/>
			</trigger>
		</plan>
		
    </plans>
    
    
    <configurations>
		<configuration name="Turistico">
			<!-- <beliefs>
                <initialbelief ref="directo">
                    <fact>false</fact>
                </initialbelief>
            </beliefs> -->
			<goals>
				<!-- Initial goal for searching for garbage. -->
				<initialgoal ref="go">
				    <!--<parameter ref="pos">
                        <value>new Vector2Double(1, 1)</value>
                    </parameter>-->
                 </initialgoal>	
				<!-- <initialgoal ref="check"/> -->		
			</goals>
		</configuration>
		
	</configurations>
</agent>