<?xml version="1.0" encoding="UTF-8"?>
<!--
  <H3>Determinação de percursos utilizando agentes BDI</H3>

  Percorre a matriz de posições em todas as direcções, e quando encontra um acidente recalcula a rota.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	 http://jadex.sourceforge.net/jadex-0.96.xsd"
	 name="Driver">
	
    <imports>
        <import>java.util.*</import>
        <import>java.util.logging.*</import>
        <import>jadex.base.fipa.*</import>
        <import>jadex.extension.envsupport.math.*</import>
        <import>jadex.commons.future.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.bridge.IContextService</import>
    </imports>
<!--	
    <capabilities> 
        <capability name="move" file="GPS" /> 
   </capabilities> 
-->	
    <beliefs>
		
        <!-- Environment. -->
		<belief name="env" class="Grid2D">
 			<fact class="IFuture">$scope.getParentAccess().getExtension("mygc2dspace")</fact>
 		</belief>
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
 			<fact>$beliefbase.env.getAvatar($scope.getComponentDescription(), $scope.getAgentModel().getFullName())</fact>
 		</belief>
        <!-- The actual position on the grid world. -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact language="jcl">
				$beliefbase.myself.position
				// $beliefbase.myself.getProperty("position")
			</fact>
 		</belief>
 		<!-- Tipo de viagem   
 		<belief name="directo" class="boolean">
            <fact>false</fact>
        </belief>	-->
        
        <belief name="time" class="ISpaceObject">
            <fact> $beliefbase.myself.getProperty("time")</fact>
        </belief>
        
        <belief name="accident" class="ISpaceObject" exported="true" />
		
    </beliefs>
	
    <goals>
        
        <achievegoal name="check" retry="false">
            <parameter name="target" class="ISpaceObject">
                 <value>
                    $target
                </value>
            </parameter>
            <unique/>
             <creationcondition language="jcl">
                    ISpaceObject $target &amp;&amp;
                    $beliefbase.myself.accident == $target &amp;&amp;
               		$target.state=="notavoid" 
            </creationcondition>
            <deliberation>
                <inhibits ref="go"/>
                <inhibits ref="check"/>
            </deliberation>
        </achievegoal>
		
		<!-- Goal for going to a specified position. -->
		<achievegoal name="go">
			<parameter name="pos" class="IVector2"/>
			<dropcondition language="jcl">
                ISpaceObject $target &amp;&amp;
                $beliefbase.myself.accident == $target &amp;&amp;
                $target.state=="notavoid" 
            </dropcondition>
		</achievegoal> 
		

    </goals>
	
    <plans>
    
    <plan name="checkAccident">
            <parameter name="target" class="ISpaceObject">
                <goalmapping ref="check.target"/>
            </parameter>
            <body class="CheckAccident"/>
            <trigger>
                <goal ref="check"/>
            </trigger>
        </plan>
    
		<!-- Plan for going to a target position. -->
		<plan name="go_plan">
			<parameter name="pos" class="IVector2">
 				<goalmapping ref="go.pos"/>
			</parameter>
			<body class="GoPlanEnv"/>
			<trigger>
				<goal ref="go"/>
			</trigger>
		</plan>
		
    </plans>
    
    
    <configurations>
		<configuration name="Turistico">
			<!-- <beliefs>
                <initialbelief ref="directo">
                    <fact>false</fact>
                </initialbelief>
            </beliefs> -->
			<goals>
				<!-- Initial goal for searching for garbage. -->
				<initialgoal ref="go" />	
				<!-- <initialgoal ref="check"/> -->		
			</goals>
		</configuration>
		
	</configurations>
</agent>