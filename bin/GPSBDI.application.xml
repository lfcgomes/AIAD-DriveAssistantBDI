<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The garbage collector application descriptor</H3>

	It can be started to launch a garbage collector scenario.
	This example is inspired by the "robot" example
	of the Jason BDI agent engine.
-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:env="http://jadex.sourceforge.net/jadex-envspace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-application-2.2.xsd
	                    http://jadex.sourceforge.net/jadex-envspace 
	                    http://jadex.sourceforge.net/jadex-envspace-2.2.xsd"
	name="GPSBDI">
	
	<imports>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.environment.RoundBasedExecutor</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.bridge.service.clock.IClockService</import>
		<import>jadex.extension.envsupport.dataview.*</import>
		<import>jadex.extension.envsupport.observer.perspective.*</import>
		<import>jadex.bdi.planlib.*</import>
	</imports>
	
	<!-- Space types of this application. Spaces are shared by agents of the same application. -->
	<extensiontypes>
	
		<!-- Declaration of a grid environment as space type. -->
		<env:envspacetype name="gc2dspace" width="30" height="30" class="Grid2D">
		
			<!-- The objecttypes of this environment. -->
			<env:objecttypes>
			
				<env:objecttype name="driver">
					<env:property name="rotation" dynamic="true">
						$object.lastmove==null || $object.lastmove.equals("right")? null:
						$object.lastmove.equals("left")? new Vector3Double(Math.PI,0,Math.PI):
						$object.lastmove.equals("up")? new Vector3Double(0,0,Math.PI*3/2):
						new Vector3Double(0,0,Math.PI/2)
					</env:property>
					<env:property name="vision_range">1</env:property>
					<env:property name="position" event="true"/>
				</env:objecttype>
				
				<env:objecttype name="accident">
					<env:property name="position" event="true"/>
				</env:objecttype>
				<env:objecttype name="homebase">
                </env:objecttype>
      			
                <env:objecttype name="finaldestination">
                </env:objecttype>
                
                <env:objecttype name="pointofinterest">
                    <env:property name="status" class="String">"notvisited"</env:property>
                    <env:property name="id" class="Integer"></env:property>
                    <env:property name="preconditions" class="String">""</env:property>
                    <env:property name="type" class="String">""</env:property>
                </env:objecttype>
                
                <env:objecttype name="cell">
                    <env:property name="road"/>
                </env:objecttype>
                
			</env:objecttypes>
			
			<!-- Processes run on their own in the environment. -->
			<env:processtypes>
			    <env:processtype name="build_map" class="BuildMap" />
			</env:processtypes>
			
			
			
			<!-- Data views for defining cut outs of the world objects. -->
			<env:dataviews>
				<env:dataview name="view_all" class="GeneralDataView2D" />
			</env:dataviews>
			
			<!-- Declaration of the relationships between agents and their avatar objects in the space. -->
			<env:avatarmappings>
				<env:avatarmapping componenttype="Driver" objecttype="driver"/>
				
			</env:avatarmappings>
		
			<!-- The percepttypes, generators and processors. -->
			<env:percepttypes>
				
				<!-- Percepttypes that the environment produces and agents can consume. -->
				<env:percepttype name="accident_appeared" objecttype="accident"/>
				<env:percepttype name="accident_disappeared" objecttype="accident" />
					
				<!-- Percept generators define which percepts should be created -->
				<env:perceptgenerator name="visiongen" class="DefaultVisionGenerator">
					<env:property name="maxrange">0</env:property>
					<env:property name="range_property">"vision_range"</env:property>
					<!-- percept types are declared with associated action types: 
						percepttype, actiontype1, actiontype2, ... -->
					<env:property name="percepttypes">
						new Object[]
						{
							new String[]{"accident_appeared", "appeared", "created"}, 
							new String[]{"accident_disappeared", "disappeared", "destroyed"}
						}
					</env:property>
				</env:perceptgenerator>
				
				<!-- Percept processors consume percepts and push them into the agents. -->
				<env:perceptprocessor componenttype="Driver" class="DefaultBDIVisionProcessor" >
					<env:property name="percepttypes">
						new Object[]
						{
							new String[]{"accident_appeared", "add", "accidents"}, 
							new String[]{"accident_disappeared", "remove", "accidents"}
						}
					</env:property>
				</env:perceptprocessor>
				
				
			</env:percepttypes>
			
			<!-- Actions that can be performed in the environment. -->
			<env:actiontypes>
				<env:actiontype name="go" class="GoAction" >
					<env:property name="object_id" class="Object"/>
					<env:property name="direction" class="String"/>
				</env:actiontype>
			</env:actiontypes>
			
			<!-- Perspectives define the user-interface appearance. -->
			<env:perspectives>
				<env:perspective name="icons" class="Perspective2D" objectplacement="center">
					<env:drawable objecttype="driver" width="1.0" height="1.0" rotation="rotation">
						<env:property name="vision_size" dynamic="true">new Vector2Double($object.vision_range*2+1)</env:property>
						<env:texturedrectangle layer="2" x="0" y="-0.1" width="0.8" height="0.8" imagepath="images/driver.png" />
						
					</env:drawable>
					
					<env:drawable objecttype="accident" width="0.5" height="0.5">
						<env:texturedrectangle layer="0" imagepath="images/crash.png" />
					</env:drawable>
					
                    <env:drawable objecttype="homebase" width="1" height="1">
                        <env:rectangle layer="1" width="1" height="1" color="#00FF00" />
                    </env:drawable>
					
					<!-- Destination -->
                    <env:drawable objecttype="finaldestination" width="1" height="1">
                        <env:rectangle layer="1" width="1" height="1" color="#FF0000" />
                    </env:drawable>
                    
                    <env:drawable objecttype="cell" width="1.0" height="1.0">
                        <env:rectangle color="yellow">
                            <env:drawcondition>!$object.road</env:drawcondition>
                        </env:rectangle>
                        <env:rectangle color="white">
                            <env:drawcondition>$object.road</env:drawcondition>
                        </env:rectangle>
                    </env:drawable>
                    
                    <env:drawable objecttype="pointofinterest" width="1" height="1">
						
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/cinema.png">
                            <env:drawcondition>$object.getProperty("type").equals("cinema")</env:drawcondition>
                        </env:texturedrectangle>
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/coffee.png">
                            <env:drawcondition>$object.getProperty("type").equals("coffee")</env:drawcondition>
                        </env:texturedrectangle>
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/beach.png">
                            <env:drawcondition>$object.getProperty("type").equals("beach")</env:drawcondition>
                        </env:texturedrectangle>
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/museum.png">
                            <env:drawcondition>$object.getProperty("type").equals("museum")</env:drawcondition>
                        </env:texturedrectangle>
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/park.png">
                            <env:drawcondition>$object.getProperty("type").equals("park")</env:drawcondition>
                        </env:texturedrectangle>
                        <env:texturedrectangle layer="2" height="1.5" width="1.5" imagepath="images/tribunal.png">
                            <env:drawcondition>$object.getProperty("type").equals("tribunal")</env:drawcondition>
                        </env:texturedrectangle>
                        
                        
                    </env:drawable>    
                    
					<!-- Draw tiles to have better perception of the world -->
					<env:prelayers>
						<env:tiledlayer width="3.5" height="3.5" imagepath="images/ground.jpg" />
						<env:gridlayer width="1.0" height="1.0" color="white" />
					</env:prelayers>
				</env:perspective>
			</env:perspectives>
			
			<!-- A space executor defines the space execution policy (e.g. roundbased vs. continuous). -->
			<env:spaceexecutor class="RoundBasedExecutor">
				<env:property name="space">$space</env:property>
			</env:spaceexecutor>
		</env:envspacetype>
	</extensiontypes>
	
	<!-- Agent types of the application. -->
	<componenttypes>
        <componenttype name="Driver" filename="Driver.agent.xml"/>
    </componenttypes>
	
	<!-- Application instance definitions. -->
	<configurations>
	
        <configuration name="Directo">
			<extensions>
				<env:envspace name="mygc2dspace" type="gc2dspace">
					<env:objects>
                        <env:object type="homebase">
                            <env:property name="position">new Vector2Double(1, 1)</env:property>
                        </env:object>
						<env:object type="accident">
                            <env:property name="position">new Vector2Double(5, 5)</env:property>
                        </env:object>
                        <env:object type="finaldestination">
                            <env:property name="position">new Vector2Double(29, 25)</env:property>
                            <env:property name="space">$space</env:property>
                        </env:object>
                        
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(10, 16)</env:property>
                            <env:property name="id">1</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"cinema"</env:property>
                        </env:object>
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(28, 4)</env:property>
                            <env:property name="id">2</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"coffee"</env:property>
                        </env:object>
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(1, 10)</env:property>
                            <env:property name="id">3</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"beach"</env:property>
                        </env:object>
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(1, 28)</env:property>
                            <env:property name="id">4</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"park"</env:property>
                        </env:object>
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(15, 4)</env:property>
                            <env:property name="id">5</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"museum"</env:property>
                        </env:object>
                        <env:object type="pointofinterest">
                            <env:property name="position">new Vector2Double(27, 18)</env:property>
                            <env:property name="id">6</env:property>
                            <env:property name="preconditions">""</env:property>
                            <env:property name="type">"tribunal"</env:property>
                        </env:object>
                        
                        
                    </env:objects>
                    <env:processes>
                        <env:process type="build_map"/>
                    </env:processes>
					<env:observers>
						<env:observer name="Mundo" dataview="mapa" perspective="abstract"/>
					</env:observers>
				</env:envspace>
			</extensions>

			<components>
				<component type="Driver"/>
			</components>			
		</configuration>
       
    </configurations>

</applicationtype>
