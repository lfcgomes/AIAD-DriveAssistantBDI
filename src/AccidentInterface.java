/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccidentInterface.java
 *
 * Created on 21/Nov/2011, 9:11:56
 */
import jadex.extension.envsupport.environment.IEnvironmentSpace;
import jadex.extension.envsupport.environment.ISpaceObject;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;

import jadex.extension.envsupport.environment.space2d.Space2D;
import jadex.extension.envsupport.math.IVector2;
import jadex.extension.envsupport.math.Vector2Int;

import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Bruno
 */
public class AccidentInterface extends javax.swing.JFrame {

    private Space2D space;
    private ISpaceObject[] accidents = null;
    private ISpaceObject[] cells = null;
    private ISpaceObject[] homes = null;
    private ISpaceObject[] dests = null;
    private ISpaceObject[] pois = null;
   
    /** Creates new form AccidentInterface */
    public AccidentInterface(IEnvironmentSpace space) {
        this.space = (Space2D) space;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interface Principal");
        setResizable(false);

        jTable1.setModel(new MyTableModel());
        for (int x = 0; x < Utils.map.length; x++) {
            for (int y = 0; y < Utils.map[x].length; y++) {
                if (Utils.map[x][y] == 1) {
                    jTable1.setValueAt(Color.gray, x, y);
                }
                else
                jTable1.setValueAt(Color.lightGray, x, y);
            }
        }
        jTable1.setCellSelectionEnabled(true);
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jTable1.setDefaultRenderer(Color.class, new ColorRenderer(true));
        jTable1.setTableHeader(null);

        accidents = space.getSpaceObjectsByType("accident");
        cells = space.getSpaceObjectsByType("cell");
        homes = space.getSpaceObjectsByType("homebase");
        dests = space.getSpaceObjectsByType("finaldestination");
        pois = space.getSpaceObjectsByType("pointofinterest");

        for (int i = 0; i < accidents.length; i++) {
            IVector2  accident = (IVector2) accidents[i].getProperty(Space2D.PROPERTY_POSITION);
            jTable1.setValueAt(Color.red, accident.getYAsInteger(), accident.getXAsInteger());
        }

        for (int j = 0; j < homes.length; j++) {
            IVector2  home = (IVector2) homes[j].getProperty(Space2D.PROPERTY_POSITION);
            jTable1.setValueAt(Color.yellow, home.getYAsInteger(), home.getXAsInteger());
        }

        for (int a = 0; a < dests.length; a++) {
            IVector2  dest = (IVector2) dests[a].getProperty(Space2D.PROPERTY_POSITION);
            jTable1.setValueAt(Color.green, dest.getYAsInteger(), dest.getXAsInteger());
        }

        for (int b = 0; b < pois.length; b++) {
            IVector2  poi = (IVector2) pois[b].getProperty(Space2D.PROPERTY_POSITION);
            jTable1.setValueAt(Color.blue, poi.getYAsInteger(), poi.getXAsInteger());
        }

        jTable1.addMouseListener(new java.awt.event.MouseAdapter(){

            public void mouseClicked(java.awt.event.MouseEvent e){
                int row = jTable1.rowAtPoint(e.getPoint());
                int col = jTable1.columnAtPoint(e.getPoint());

                Space2D grid = (Space2D) space;

                if(jTable1.getValueAt(row, col).equals(Color.gray)){

                    Map props = new HashMap();
                    props.put("state", "notavoid");
                    props.put(Space2D.PROPERTY_POSITION, new Vector2Int(col, row));
                    grid.createSpaceObject("accident", props, null);

                    jTable1.setValueAt(Color.red, row, col);
                    // Utils.map[row][col]=0;
                }
                else if(jTable1.getValueAt(row, col).equals(Color.red)){
                    jTable1.setValueAt(Color.lightGray, row, col);

                    for(ISpaceObject so : accidents)
                    {
                        if(((IVector2)so.getProperty("position")).equals(new Vector2Int(col, row) )){
                            space.destroySpaceObject(so.getId());
                            Utils.map[row][col]=1;
                            Utils.acc = so;
                        }
                    }

                    for(ISpaceObject ro : cells)
                    {

                        if(((IVector2)ro.getProperty("position")).equals(new Vector2Int(col, row) )){
                            space.destroySpaceObject(ro.getId());
                            Utils.map[row][col]=0;}
                    }

                }
                else if(jTable1.getValueAt(row, col).equals(Color.lightGray)){
                    Map props = new HashMap();
                    props.put("road", true);
                    props.put(Space2D.PROPERTY_POSITION, new Vector2Int(col, row));
                    grid.createSpaceObject("cell", props, null);
                    jTable1.setValueAt(Color.gray, row, col);
                    Utils.map[row][col]=1;
                }
                accidents = space.getSpaceObjectsByType("accident");
                cells = space.getSpaceObjectsByType("cell");
            }

        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Começar simulação");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Utils.start = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    class MyTableModel extends AbstractTableModel {

        private String[] columnNames = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
            "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", 
            "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"};
        private Object[][] data = new Object[30][30];
        
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.length;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.

            return true;

        }

        public void setValueAt(Object value, int row, int col) {

            data[row][col] = value;
            fireTableCellUpdated(row, col);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
